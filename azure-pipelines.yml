trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: default  # Agente Ubuntu

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)

steps:
# 1️⃣ Variables dinámicas según rama
- script: |
    if [ "$(Build.SourceBranchName)" == "dev" ]; then
      echo "##vso[task.setvariable variable=releaseName]app-dev"
      echo "##vso[task.setvariable variable=namespace]dev"
    else
      echo "##vso[task.setvariable variable=releaseName]app-prod"
      echo "##vso[task.setvariable variable=namespace]prod"
    fi
  displayName: 'Set releaseName and namespace dynamically'

# 2️⃣ Build Docker image
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 3️⃣ Push Docker image to Docker Hub
- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    command: push
    tags: |
      $(imageName):$(tag)

# 4️⃣ Update Helm values.yaml and push to GitHub securely
# 4️⃣ Update Helm values.yaml and push to GitHub via SSH
- script: |
    echo "Updating values.yaml for branch $(Build.SourceBranchName) with tag $(tag)..."

    if [ "$(Build.SourceBranchName)" == "dev" ]; then
      envPath="envs/dev/values.yaml"
    else
      envPath="envs/prod/values.yaml"
    fi

    sed -i "s|tag: .*|tag: $(tag)|" $envPath

    git config user.email "pipeline@azuredevops.local"
    git config user.name "Azure Pipelines"

    # Configura SSH (usa tu clave creada en el agente)
    mkdir -p ~/.ssh
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/github

    # Asegura el host de GitHub
    ssh-keyscan github.com >> ~/.ssh/known_hosts

    # Cambia URL a SSH
    git remote set-url origin git@github.com:jreb-123/k8s-lab-week1.git

    # Actualiza y sube cambios
    git pull origin $(Build.SourceBranchName) --rebase || echo "Nothing to rebase"
    git add $envPath
    git commit -m "Update image tag to $(tag)" || echo "No changes to commit"
    git push origin HEAD:$(Build.SourceBranchName)
  displayName: 'Update Helm values.yaml and push to GitHub via SSH'

# 5️⃣ Deploy to Kubernetes via Helm
- script: |
    echo "Deploying release: $(releaseName)"
    echo "Namespace: $(namespace)"
    echo "Image: $(imageName):$(tag)"
    helm upgrade --install $(releaseName) charts/app \
      --namespace $(namespace) \
      --create-namespace \
      --set image.repository=$(imageName),image.tag=$(tag)
  displayName: 'Deploy to AKS via Helm'


# 6️⃣ Rollback si falla
- script: |
    echo "Checking Helm deployment status..."
    helm status $(releaseName) -n $(namespace) || (
      echo "Deployment failed, rolling back..."
      helm rollback $(releaseName) 0 -n $(namespace)
    )
  displayName: 'Check deployment / Rollback if needed'
