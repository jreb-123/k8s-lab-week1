trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: default

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)
  releaseName: 'app-prod'
  namespace: 'prod'

  # Si la rama es dev, cambia release y namespace
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    releaseName: 'app-dev'
    namespace: 'dev'

steps:
# 1️⃣ Build de la imagen Docker
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 2️⃣ Push a Docker Hub
- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    command: push
    tags: |
      $(imageName):$(tag)

# 3️⃣ Actualiza el tag en el values.yaml del entorno correspondiente
- task: PowerShell@2
  displayName: 'Update Helm values and push to GitHub'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Actualizando values.yaml con el nuevo tag $(tag)..."
      $branchName = "$(Build.SourceBranchName)"
      if ($branchName -eq "refs/heads/dev") {
        $envPath = "envs/dev/values.yaml"
      } else {
        $envPath = "envs/prod/values.yaml"
      }

      # Sustituimos el tag anterior
      (Get-Content $envPath) -replace 'tag: .*', "tag: $(tag)" | Set-Content $envPath

      # Configuración de git
      git config user.email "pipeline@azuredevops.local"
      git config user.name "Azure Pipelines"

      git add $envPath
      git commit -m "Update image tag to $(tag)"
      git pull origin $branchName --rebase
      git push origin HEAD:$branchName

# 4️⃣ Despliegue en Kubernetes con Helm
- task: HelmDeploy@0
  displayName: 'Deploy to Kubernetes via Helm'
  inputs:
    connectionType: 'None'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'charts/app'
    releaseName: '$(releaseName)'
    namespace: '$(namespace)'
    overrideValues: 'image.repository=$(imageName),image.tag=$(tag)'
    install: true
    waitForExecution: false
    arguments: '--create-namespace'
