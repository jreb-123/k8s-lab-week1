trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: default  # Agente Ubuntu

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)

steps:
# 1Ô∏è‚É£ Variables din√°micas seg√∫n rama
- script: |
    if [ "$(Build.SourceBranchName)" == "dev" ]; then
      echo "##vso[task.setvariable variable=releaseName]app-dev"
      echo "##vso[task.setvariable variable=namespace]dev"
    else
      echo "##vso[task.setvariable variable=releaseName]app-prod"
      echo "##vso[task.setvariable variable=namespace]prod"
    fi
  displayName: 'Set releaseName and namespace dynamically'

# 2Ô∏è‚É£ Build Docker image
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 3Ô∏è‚É£ Push Docker image to Docker Hub
- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    command: push
    tags: |
      $(imageName):$(tag)

# 4Ô∏è‚É£ Update Helm values.yaml and push to GitHub via SSH
- script: |
    echo "Updating values.yaml for branch $(Build.SourceBranchName) with tag $(tag)..."

    if [ "$(Build.SourceBranchName)" == "dev" ]; then
      envPath="envs/dev/values.yaml"
    else
      envPath="envs/prod/values.yaml"
    fi

    sed -i "s|tag: .*|tag: $(tag)|" $envPath

    git config user.email "pipeline@azuredevops.local"
    git config user.name "Azure Pipelines"
    git add $envPath
    git commit -m "Update image tag to $(tag)" || echo "No changes to commit"

    # --- üîë Configurar clave SSH desde variable secreta ---
    mkdir -p ~/.ssh
    echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    chmod 600 ~/.ssh/id_ed25519

    # Evitar prompt de autenticaci√≥n
    ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null

    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_ed25519

    # --- ‚úÖ Push via SSH ---
    git remote set-url origin git@github.com:jreb-123/k8s-lab-week1.git

    git pull origin $(Build.SourceBranchName) --rebase || true
    git push origin HEAD:$(Build.SourceBranchName)

  displayName: 'Update Helm values.yaml and push to GitHub via SSH'
  env:
    SSH_PRIVATE_KEY: $(SSH_PRIVATE_KEY)



# 5Ô∏è‚É£ Deploy a Kubernetes via Helm
- task: HelmDeploy@0
  displayName: 'Deploy to Kubernetes via Helm'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'aks-kubeconfig-connection'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'charts/app'
    releaseName: '${{ variables.releaseName }}'
    namespace: '${{ variables.namespace }}'
    overrideValues: 'image.repository=$(imageName),image.tag=$(tag)'
    install: true
    waitForExecution: true
    arguments: '--create-namespace'

# 6Ô∏è‚É£ Rollback si falla
- script: |
    echo "Checking Helm deployment status..."
    helm status $(releaseName) -n $(namespace) || (
      echo "Deployment failed, rolling back..."
      helm rollback $(releaseName) 0 -n $(namespace)
    )
  displayName: 'Check deployment / Rollback if needed'
