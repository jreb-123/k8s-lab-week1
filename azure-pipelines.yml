trigger:
  branches:
    include:
      - main
      - dev

pool:
  name: Default   # Tu agente local

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)
  releaseName: ''  # Se setea en el paso PowerShell
  namespace: ''    # Se setea en el paso PowerShell

steps:
# 1️⃣ Checkout del código
- checkout: self

# 2️⃣ Set releaseName y namespace según la rama
- powershell: |
    if ('$(Build.SourceBranchName)' -eq 'refs/heads/dev') {
      Write-Host "##vso[task.setvariable variable=releaseName]app-dev"
      Write-Host "##vso[task.setvariable variable=namespace]dev"
    } else {
      Write-Host "##vso[task.setvariable variable=releaseName]app-prod"
      Write-Host "##vso[task.setvariable variable=namespace]prod"
    }
  displayName: 'Set releaseName and namespace'

# 3️⃣ Login en Docker Hub usando tu Service Connection
- task: Docker@2
  displayName: 'Login to Docker Hub'
  inputs:
    command: login
    containerRegistry: 'DockerHubService'   # Tu conexión ya creada

# 4️⃣ Build de la imagen Docker
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 5️⃣ Push de la imagen a Docker Hub
- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    command: push
    containerRegistry: 'DockerHubService'
    tags: |
      $(imageName):$(tag)

# 6️⃣ Actualizar values.yaml con el tag de la imagen y hacer push a GitHub
- powershell: |
    Write-Host "Actualizando values.yaml con el nuevo tag..."
    (Get-Content "$(Build.SourcesDirectory)/charts/app/values.yaml") `
    -replace 'tag: .*', "tag: $(tag)" | Set-Content "$(Build.SourcesDirectory)/charts/app/values.yaml"

    git config user.email "ci@azurepipelines.com"
    git config user.name "Azure Pipelines"
    git add charts/app/values.yaml
    git commit -m "Update image tag to $(tag)"
    git push origin HEAD
  displayName: "Update Helm values and push to GitHub"

# 7️⃣ Despliegue con Helm a tu cluster local (Kind)
- task: HelmDeploy@0
  displayName: 'Deploy to Kubernetes'
  inputs:
    connectionType: 'None'      # Porque es local
    chartType: 'FilePath'
    chartPath: '$(Build.SourcesDirectory)/charts/app'
    releaseName: '$(releaseName)'
    namespace: '$(namespace)'
    overrideValues: 'image.tag=$(tag)'
    install: true
    upgrade: true
