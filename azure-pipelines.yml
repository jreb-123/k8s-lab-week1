
trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: default  # tu agente Ubuntu auto hospedado

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)

steps:
# 1Ô∏è‚É£ Build de la imagen Docker
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 2Ô∏è‚É£ Push a Docker Hub
- task: Docker@2
  displayName: 'Push Docker image to Docker Hub'
  inputs:
    command: push
    tags: |
      $(imageName):$(tag)

# 3Ô∏è‚É£ Actualiza el tag en values.yaml (rama dev ‚Üí dev, main ‚Üí prod)
- task: Bash@3
  displayName: 'Update Helm values and push to GitHub'
  inputs:
    targetType: 'inline'
    script: |
      echo "=== üîß Actualizando values.yaml con el nuevo tag $(tag) ==="

      branchName=$(Build.SourceBranchName)
      if [[ "$branchName" == "dev" ]]; then
        envPath="envs/dev/values.yaml"
        releaseName="app-dev"
        namespace="dev"
      else
        envPath="envs/prod/values.yaml"
        releaseName="app-prod"
        namespace="prod"
      fi

      echo "Usando entorno: $branchName ‚Üí archivo: $envPath"

      # Sustituimos el tag
      sed -i "s/tag: .*/tag: $(tag)/" "$envPath"

      # Config git
      git config user.email "pipeline@azuredevops.local"
      git config user.name "Azure Pipelines"

      git add "$envPath"
      git commit -m "Update image tag to $(tag)" || echo "‚ö†Ô∏è No hay cambios que commitear"
      git pull origin "$branchName" --rebase
      git push origin HEAD:"$branchName"

      echo "‚úÖ values.yaml actualizado correctamente."

# 4Ô∏è‚É£ Despliegue en AKS con Helm seg√∫n rama
- task: HelmDeploy@0
  displayName: 'Deploy to AKS via Helm'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'aks-kubeconfig-connection'  # ‚ö†Ô∏è cambia por tu service connection real
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: 'charts/app'
    releaseName: '$(releaseName)'
    namespace: '$(namespace)'
    overrideValues: 'image.repository=$(imageName),image.tag=$(tag)'
    install: true
    waitForExecution: false
    arguments: '--create-namespace'

# 5Ô∏è‚É£ Confirmaci√≥n visual (solo logging informativo)
- script: |
    echo "üöÄ Despliegue completado en el entorno $(namespace)"
    echo "App: $(releaseName)"
    echo "Tag: $(tag)"
  displayName: 'Log de despliegue'
