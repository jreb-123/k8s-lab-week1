trigger:
  branches:
    include:
      - main
      - dev

pool:
  name: Default   # Tu agente local en Windows 10

variables:
  imageName: 'jrebaza01/app-week1'
  tag: $(Build.SourceVersion)
  releaseName: $[eq(variables['Build.SourceBranchName'], 'dev') ? 'app-dev' : 'app-prod']
  namespace: $[eq(variables['Build.SourceBranchName'], 'dev') ? 'dev' : 'prod']

steps:
# 1️⃣ Checkout del código
- checkout: self
  clean: true

# 2️⃣ Login en Docker Hub
- task: Docker@2
  displayName: 'Login to Docker Hub'
  inputs:
    command: login
    containerRegistry: 'DockerHubService'   # Tu conexión existente

# 3️⃣ Build de la imagen Docker
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: build
    Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/app'
    tags: |
      $(imageName):$(tag)

# 4️⃣ Push de la imagen a Docker Hub
- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    command: push
    containerRegistry: 'DockerHubService'
    tags: |
      $(imageName):$(tag)

# 5️⃣ Actualizar values.yaml con el nuevo tag y hacer push a GitHub
- powershell: |
    Write-Host "Actualizando charts/app/values.yaml con el tag $(tag)..."

    (Get-Content "$(Build.SourcesDirectory)/charts/app/values.yaml") `
    -replace 'tag: .*', "tag: $(tag)" | Set-Content "$(Build.SourcesDirectory)/charts/app/values.yaml"

    git config user.email "ci@azurepipelines.com"
    git config user.name "Azure Pipelines"

    # ⚡ Checkout explícito de la rama para evitar detached HEAD
    git checkout $(Build.SourceBranchName)

    git add charts/app/values.yaml
    git commit -m "Update image tag to $(tag)"
    git push origin $(Build.SourceBranchName)
  displayName: "Update Helm values and push to GitHub"

# 6️⃣ Deploy a Kubernetes con Helm
- task: HelmDeploy@0
  displayName: "Deploy app with Helm"
  inputs:
    connectionType: 'None'              # Si usas Kind local
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: '$(Build.SourcesDirectory)/charts/app'
    releaseName: '$(releaseName)'
    namespace: '$(namespace)'
    overrideValues: |
      image.tag=$(tag)
    install: true
